if(NOT PTI_PROJECT_LICENSE_FILE)
  if(EXISTS "${PROJECT_SOURCE_DIR}/../LICENSE")
    set(PTI_PROJECT_LICENSE_FILE "${PROJECT_SOURCE_DIR}/../LICENSE")
  endif()
endif()

#################### Generic CPack Configuration ####################
include(ProcessorCount)
ProcessorCount(NPROC)
set(CPACK_THREADS ${NPROC})

# TODO: Figure out whether this is desired or not. We have not stripped symbols
# in the past, so for now, this will be kept OFF. Note, leaving this ON is
# incompatible with CPACK_DEBIAN_RUNTIME_DEBUGINFO_PACKAGE and
# CPACK_RPM_RUNTIME_DEBUGINFO_PACKAGE.
set(CPACK_STRIP_FILES OFF)

set(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${PROJECT_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${PROJECT_VERSION_PATCH}")
set(CPACK_PACKAGE_VENDOR "Intel Corporation")
set(CPACK_PACKAGE_CONTACT "${PROJECT_HOMEPAGE_URL}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_DESCRIPTION}")
set(CPACK_PACKAGE_DESCRIPTION
  "${CPACK_PACKAGE_DESCRIPTION_SUMMARY}. Library for Intel trace and profiling.")
set(CPACK_PACKAGE_HOMEPAGE_URL "${PROJECT_HOMEPAGE_URL}")
set(CPACK_PACKAGE_CHECKSUM SHA256)
if (PTI_PROJECT_LICENSE_FILE)
  set(CPACK_RESOURCE_FILE_LICENSE "${PTI_PROJECT_LICENSE_FILE}")
endif()
set(CPACK_RESOURCE_FILE_README "${PROJECT_SOURCE_DIR}/README.md")
set(CPACK_RESOURCE_FILE_WELCOME "${CPACK_RESOURCE_FILE_README}")

set(CPACK_SOURCE_IGNORE_FILES ${CMAKE_CURRENT_BINARY_DIR} .git .cache venv .venv)

#################### DEBIAN CPack Configuration ####################
set(CPACK_DEB_COMPONENT_INSTALL ON)
set(CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS ON)
set(CPACK_DEBIAN_PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
set(CPACK_DEBIAN_RUNTIME_DEBUGINFO_PACKAGE ON)
set(CPACK_DEBIAN_RUNTIME_PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
set(CPACK_DEBIAN_DEVELOPMENT_PACKAGE_NAME "${CPACK_PACKAGE_NAME}-dev")
set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)
set(CPACK_DEBIAN_DEVELOPMENT_PACKAGE_DEPENDS
  "${CPACK_PACKAGE_NAME} (=${CPACK_PACKAGE_VERSION})")

#################### RPM CPack Configuration ####################
set(CPACK_RPM_COMPONENT_INSTALL ON)
set(CPACK_RPM_PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
set(CPACK_RPM_RUNTIME_DEBUGINFO_PACKAGE ON)
set(CPACK_RPM_RUNTIME_PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
set(CPACK_RPM_DEVELOPMENT_PACKAGE_NAME "${CPACK_PACKAGE_NAME}-devel")
set(CPACK_RPM_FILE_NAME RPM-DEFAULT)
set(CPACK_RPM_MAIN_COMPONENT Runtime)
if (CPACK_RESOURCE_FILE_LICENSE)
  set(CPACK_RPM_PACKAGE_LICENSE "${CPACK_RESOURCE_FILE_LICENSE}")
endif()
set(CPACK_RPM_RUNTIME_PACKAGE_AUTOREQPROV ON)
set(CPACK_RPM_DEVELOPMENT_PACKAGE_AUTOREQPROV ON)
set(CPACK_RPM_DEVELOPMENT_PACKAGE_REQUIRES "${CPACK_PACKAGE_NAME} = ${CPACK_PACKAGE_VERSION}")

include(CPack) # After CPACK_*

cpack_add_component(
  Pti_Runtime
  DISPLAY_NAME "Libraries"
  DESCRIPTION "Libraries used to link"
  GROUP Runtime
)

cpack_add_component(
  Pti_Development
  DISPLAY_NAME "Development"
  DESCRIPTION "Header files + configuration files"
  GROUP Development
  DEPENDS Pti_Runtime
)

cpack_add_component(
  Pti_Doc
  DISPLAY_NAME "Documentation"
  DESCRIPTION "Documentation related files"
  GROUP Doc
  DEPENDS Pti_Runtime
)

cpack_add_component(
  Pti_oneAPI
  DISPLAY_NAME "oneAPI-specifics"
  DESCRIPTION "files related to oneAPI installation"
  GROUP oneAPI
  DEPENDS Pti_Runtime
)
